"use strict";
require("typings-global");
var plugins = {
    path: require("path"),
    beautylog: require("beautylog"),
    indentString: require("indent-string"),
    g: {
        wavethrough: require("gulp-wavethrough"),
    },
    through: require("through2")
};
var doNothing = function () {
};
module.exports = function (activateArg) {
    if (activateArg === void 0) { activateArg = true; }
    if (activateArg == true) {
        return plugins.through.obj(function (file, enc, cb) {
            //do some string calculating
            var localFile = {
                contents: String(file.contents)
            };
            localFile.contents = plugins.indentString(localFile.contents, ' ', 2);
            localFile.contents = plugins.indentString(localFile.contents, '>'.red, 2);
            localFile.contents = '\n'.concat(localFile.contents);
            //form console output
            plugins.beautylog.info("file in your pipeline:");
            console.log("|| ".blue + "File.contents: ".yellow + localFile.contents.bold);
            console.log("|| ".blue + "File.path: ".yellow + String(file.path).bold.blue);
            console.log("|| ".blue + "File.base: ".yellow + String(file.base).bold.blue);
            console.log("|| ".blue + "File.relative: ".yellow + String(file.relative).bold.blue);
            console.log("|| ".blue + "File.data: ".yellow + String(JSON.stringify(file.data)).bold.blue);
            return cb(null, file); //run callback function to signal end of plugin process.
        });
    }
    else if (activateArg == false) {
        return plugins.g.wavethrough(); //wave through
    }
    else {
        plugins.beautylog.error("gulp-inspect: please provide a valid boolean value as argument");
        return plugins.g.wavethrough(); //wave through
    }
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFPLGdCQUNQLENBQUMsQ0FEc0I7QUFDdkIsSUFBSSxPQUFPLEdBQUc7SUFDVixJQUFJLEVBQUUsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUNyQixTQUFTLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQztJQUMvQixZQUFZLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztJQUN0QyxDQUFDLEVBQUU7UUFDQyxXQUFXLEVBQUUsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0tBQzNDO0lBQ0QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUM7Q0FDL0IsQ0FBQTtBQUVELElBQUksU0FBUyxHQUFHO0FBRWhCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBQyxXQUEwQjtJQUExQiwyQkFBMEIsR0FBMUIsa0JBQTBCO0lBQ3hDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNyQyw0QkFBNEI7WUFDNUIsSUFBSSxTQUFTLEdBQUc7Z0JBQ1osUUFBUSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ2xDLENBQUM7WUFDRixTQUFTLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEUsU0FBUyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMxRSxTQUFTLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXJELHFCQUFxQjtZQUNyQixPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO1lBQ2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JGLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RixNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLHdEQUF3RDtRQUNuRixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxjQUFjO0lBQ2xELENBQUM7SUFBQyxJQUFJLENBQUMsQ0FBQztRQUNKLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7UUFDMUYsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxjQUFjO0lBQ2xELENBQUM7QUFDTCxDQUFDLENBQUMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJ0eXBpbmdzLWdsb2JhbFwiXHJcbnZhciBwbHVnaW5zID0ge1xyXG4gICAgcGF0aDogcmVxdWlyZShcInBhdGhcIiksXHJcbiAgICBiZWF1dHlsb2c6IHJlcXVpcmUoXCJiZWF1dHlsb2dcIiksXHJcbiAgICBpbmRlbnRTdHJpbmc6IHJlcXVpcmUoXCJpbmRlbnQtc3RyaW5nXCIpLFxyXG4gICAgZzoge1xyXG4gICAgICAgIHdhdmV0aHJvdWdoOiByZXF1aXJlKFwiZ3VscC13YXZldGhyb3VnaFwiKSxcclxuICAgIH0sXHJcbiAgICB0aHJvdWdoOiByZXF1aXJlKFwidGhyb3VnaDJcIilcclxufVxyXG5cclxudmFyIGRvTm90aGluZyA9IGZ1bmN0aW9uKCl7XHJcblxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoYWN0aXZhdGVBcmc6Ym9vbGVhbiA9IHRydWUpID0+IHtcclxuICAgIGlmIChhY3RpdmF0ZUFyZyA9PSB0cnVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHBsdWdpbnMudGhyb3VnaC5vYmooKGZpbGUsIGVuYywgY2IpID0+IHtcclxuICAgICAgICAgICAgLy9kbyBzb21lIHN0cmluZyBjYWxjdWxhdGluZ1xyXG4gICAgICAgICAgICB2YXIgbG9jYWxGaWxlID0ge1xyXG4gICAgICAgICAgICAgICAgY29udGVudHM6IFN0cmluZyhmaWxlLmNvbnRlbnRzKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBsb2NhbEZpbGUuY29udGVudHMgPSBwbHVnaW5zLmluZGVudFN0cmluZyhsb2NhbEZpbGUuY29udGVudHMsICcgJywgMik7XHJcbiAgICAgICAgICAgIGxvY2FsRmlsZS5jb250ZW50cyA9IHBsdWdpbnMuaW5kZW50U3RyaW5nKGxvY2FsRmlsZS5jb250ZW50cywgJz4nLnJlZCwgMik7XHJcbiAgICAgICAgICAgIGxvY2FsRmlsZS5jb250ZW50cyA9ICdcXG4nLmNvbmNhdChsb2NhbEZpbGUuY29udGVudHMpO1xyXG5cclxuICAgICAgICAgICAgLy9mb3JtIGNvbnNvbGUgb3V0cHV0XHJcbiAgICAgICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmluZm8oXCJmaWxlIGluIHlvdXIgcGlwZWxpbmU6XCIpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwifHwgXCIuYmx1ZSArIFwiRmlsZS5jb250ZW50czogXCIueWVsbG93ICsgbG9jYWxGaWxlLmNvbnRlbnRzLmJvbGQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInx8IFwiLmJsdWUgKyBcIkZpbGUucGF0aDogXCIueWVsbG93ICsgU3RyaW5nKGZpbGUucGF0aCkuYm9sZC5ibHVlKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ8fCBcIi5ibHVlICsgXCJGaWxlLmJhc2U6IFwiLnllbGxvdyArIFN0cmluZyhmaWxlLmJhc2UpLmJvbGQuYmx1ZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwifHwgXCIuYmx1ZSArIFwiRmlsZS5yZWxhdGl2ZTogXCIueWVsbG93ICsgU3RyaW5nKGZpbGUucmVsYXRpdmUpLmJvbGQuYmx1ZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwifHwgXCIuYmx1ZSArIFwiRmlsZS5kYXRhOiBcIi55ZWxsb3cgKyBTdHJpbmcoSlNPTi5zdHJpbmdpZnkoZmlsZS5kYXRhKSkuYm9sZC5ibHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNiKG51bGwsIGZpbGUpOyAvL3J1biBjYWxsYmFjayBmdW5jdGlvbiB0byBzaWduYWwgZW5kIG9mIHBsdWdpbiBwcm9jZXNzLlxyXG4gICAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmIChhY3RpdmF0ZUFyZyA9PSBmYWxzZSkge1xyXG4gICAgICAgIHJldHVybiBwbHVnaW5zLmcud2F2ZXRocm91Z2goKTsgLy93YXZlIHRocm91Z2hcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cuZXJyb3IoXCJndWxwLWluc3BlY3Q6IHBsZWFzZSBwcm92aWRlIGEgdmFsaWQgYm9vbGVhbiB2YWx1ZSBhcyBhcmd1bWVudFwiKTtcclxuICAgICAgICByZXR1cm4gcGx1Z2lucy5nLndhdmV0aHJvdWdoKCk7IC8vd2F2ZSB0aHJvdWdoXHJcbiAgICB9XHJcbn07XHJcbiJdfQ==
